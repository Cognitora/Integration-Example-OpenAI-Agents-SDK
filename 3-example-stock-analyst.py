#!/usr/bin/env python3
"""
üìà Autonomous Stock Analyst with Predictive Analytics
=====================================================

This example demonstrates ADVANCED PREDICTIVE ANALYTICS:
- Fetching real stock market data from free APIs
- AI-powered financial analysis
- Linear regression for price prediction
- Multi-stock comparison and recommendations
- Automated report generation

Inspired by: https://www.getdynamiq.ai/post/how-to-build-an-autonomous-data-analyst-using-dynamiq-e2b-and-together-ai

Features:
- Real stock data from Yahoo Finance API (free, no auth)
- Predictive modeling with machine learning
- Multi-stock analysis and comparison
- Investment recommendations
- Professional markdown reports
"""

import os
import time
import re
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from cognitora import Cognitora

from agents import Agent, Runner, function_tool

# Load environment variables
load_dotenv()

# Configuration
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
COGNITORA_API_KEY = os.getenv("COGNITORA_API_KEY")

# Initialize Cognitora client
cognitora_client = Cognitora(api_key=COGNITORA_API_KEY)

# ============================================================================
# ANSI COLORS
# ============================================================================

class Colors:
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def save_analysis_to_markdown(analyses_results, output_dir="output_analysis"):
    """
    Save all analysis results to a markdown file.
    
    Args:
        analyses_results: List of analysis result dictionaries
        output_dir: Directory to save the markdown file
    
    Returns:
        Path to the saved markdown file
    """
    # Create output directory
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"stock_analysis_{timestamp}.md"
    filepath = os.path.join(output_dir, filename)
    
    # Build markdown content
    markdown = f"""# üìà Autonomous Stock Market Analysis Report

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}  
**Powered by:** OpenAI Agents SDK + Cognitora + OpenAI GPT-4o  
**Data Source:** Yahoo Finance API

---

"""
    
    # Add each analysis
    for i, analysis_result in enumerate(analyses_results, 1):
        markdown += f"## {i}. {analysis_result['name']}\n\n"
        markdown += f"**Duration:** {analysis_result['duration']:.1f}s\n\n"
        
        # Clean and format the analysis text
        analysis_text = analysis_result['text']
        
        # Remove ANSI color codes if any
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        analysis_text = ansi_escape.sub('', analysis_text)
        
        # Format the text
        markdown += f"### Analysis Results\n\n"
        markdown += f"{analysis_text}\n\n"
        markdown += "---\n\n"
    
    # Add summary section
    total_time = sum(r['duration'] for r in analyses_results)
    markdown += f"""## üìä Summary

**Total Analyses:** {len(analyses_results)}  
**Total Time:** {total_time:.1f} seconds  

### Completed Analyses:
"""
    
    for i, result in enumerate(analyses_results, 1):
        markdown += f"{i}. {result['name']} ({result['duration']:.1f}s)\n"
    
    markdown += f"""

---

## ‚ö†Ô∏è Disclaimer

This analysis is for educational and demonstration purposes only. It is not financial advice. 
The predictions are based on simple linear regression models and should not be used for actual 
investment decisions. Always consult with a qualified financial advisor before making investment choices.

---

**Generated by:** OpenAI Agents SDK + Cognitora Integration Example  
**GitHub:** [Integration-Example-OpenAI-Agents-SDK](https://github.com/Cognitora/Integration-Example-OpenAI-Agents-SDK)

"""
    
    # Write to file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(markdown)
    
    return filepath


# ============================================================================
# TOOLS FOR STOCK ANALYSIS
# ============================================================================

@function_tool
def analyze_stocks_with_ml(analysis_task: str) -> str:
    """
    Perform advanced stock analysis with machine learning and predictive modeling.
    
    This tool executes Python code in a secure sandbox with networking enabled
    to fetch real stock data and perform sophisticated analysis including:
    - Fetching historical stock prices from Yahoo Finance
    - Statistical analysis and trend detection
    - Linear regression for price prediction
    - Multi-stock comparison
    - Investment recommendations
    
    CRITICAL REQUIREMENTS:
    1. Use urllib and json (built-in) to fetch data from Yahoo Finance API
    2. MUST use print() to display ALL analysis results
    3. Use numpy for calculations (available in sandbox)
    4. Show actual numbers, predictions, and insights
    5. Format output clearly with headers and labels
    
    FREE YAHOO FINANCE API ENDPOINTS (No auth required):
    - Historical data: https://query1.finance.yahoo.com/v8/finance/chart/{SYMBOL}?interval=1d&range=10d
    - Quote data: https://query1.finance.yahoo.com/v10/finance/quoteSummary/{SYMBOL}
    
    EXAMPLE USAGE:
    - "Predict Apple stock prices for next 10 days using linear regression"
    - "Compare AAPL and MSFT performance over last month"
    - "Find best tech stocks for long-term investment"
    
    Args:
        analysis_task: Description of the analysis to perform
    
    Returns:
        Analysis results with predictions and insights
    """
    
    # Generate comprehensive Python code for stock analysis
    code = f"""
import urllib.request
import json
import numpy as np
from datetime import datetime, timedelta

print("=" * 80)
print("üìà AUTONOMOUS STOCK ANALYST")
print("=" * 80)
print(f"\\nTask: {analysis_task}")
print(f"Timestamp: {{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}}")
print("=" * 80)

def fetch_stock_data(symbol, days=30):
    \"\"\"Fetch historical stock data from Yahoo Finance API\"\"\"
    try:
        # Yahoo Finance API endpoint (free, no auth required)
        url = f"https://query1.finance.yahoo.com/v8/finance/chart/{{symbol}}?interval=1d&range={{days}}d"
        
        req = urllib.request.Request(url)
        req.add_header('User-Agent', 'Mozilla/5.0')
        
        with urllib.request.urlopen(req, timeout=10) as response:
            data = json.loads(response.read().decode())
        
        # Check if data is valid
        if 'chart' not in data or 'result' not in data['chart'] or not data['chart']['result']:
            print(f"‚ö†Ô∏è  No data available for {{symbol}}")
            return [], []
        
        # Extract price data
        result = data['chart']['result'][0]
        timestamps = result.get('timestamp', [])
        prices = result.get('indicators', {{}}).get('quote', [{{}}])[0]
        
        # Get closing prices
        close_prices = prices.get('close', [])
        
        if not close_prices:
            print(f"‚ö†Ô∏è  No price data for {{symbol}}")
            return [], []
        
        # Filter out None values
        dates = []
        valid_prices = []
        for i, price in enumerate(close_prices):
            if price is not None and i < len(timestamps):
                dates.append(datetime.fromtimestamp(timestamps[i]).strftime('%Y-%m-%d'))
                valid_prices.append(price)
        
        if not valid_prices:
            print(f"‚ö†Ô∏è  No valid prices for {{symbol}}")
            return [], []
        
        print(f"‚úì Fetched {{len(valid_prices)}} days of data for {{symbol}}")
        return dates, valid_prices
    except urllib.error.URLError as e:
        print(f"‚ö†Ô∏è  Network error for {{symbol}}: {{str(e)}}")
        return [], []
    except Exception as e:
        print(f"‚ö†Ô∏è  Error fetching data for {{symbol}}: {{str(e)}}")
        return [], []

def linear_regression_predict(prices, days_ahead=10):
    \"\"\"Perform linear regression and predict future prices\"\"\"
    if len(prices) < 2:
        return []
    
    # Prepare data for regression
    X = np.arange(len(prices))
    y = np.array(prices)
    
    # Calculate linear regression coefficients
    # y = mx + b
    n = len(X)
    sum_x = np.sum(X)
    sum_y = np.sum(y)
    sum_xy = np.sum(X * y)
    sum_x2 = np.sum(X ** 2)
    
    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)
    b = (sum_y - m * sum_x) / n
    
    # Predict future prices
    future_X = np.arange(len(prices), len(prices) + days_ahead)
    predictions = m * future_X + b
    
    return predictions.tolist(), m, b

# Analysis based on task: {analysis_task}
"""

    # Add specific analysis code based on task
    if "apple" in analysis_task.lower() or "aapl" in analysis_task.lower():
        code += """
print("\\nüìä ANALYSIS 1: Apple (AAPL) Stock Prediction")
print("-" * 80)

# Fetch Apple stock data
dates, prices = fetch_stock_data('AAPL', days=30)

if prices:
    print(f"\\nHistorical Data (Last 10 days):")
    for i in range(max(0, len(dates) - 10), len(dates)):
        print(f"  {dates[i]}: ${prices[i]:.2f}")
    
    # Calculate statistics
    current_price = prices[-1]
    avg_price = np.mean(prices)
    min_price = np.min(prices)
    max_price = np.max(prices)
    volatility = np.std(prices)
    
    print(f"\\nStatistical Summary:")
    print(f"  Current Price: ${current_price:.2f}")
    print(f"  Average Price: ${avg_price:.2f}")
    print(f"  Min Price: ${min_price:.2f}")
    print(f"  Max Price: ${max_price:.2f}")
    print(f"  Volatility (Std Dev): ${volatility:.2f}")
    
    # Perform prediction
    predictions, slope, intercept = linear_regression_predict(prices, days_ahead=10)
    
    print(f"\\nLinear Regression Model:")
    print(f"  Slope: {slope:.4f}")
    print(f"  Intercept: {intercept:.2f}")
    print(f"  Trend: {'UPWARD ‚Üó' if slope > 0 else 'DOWNWARD ‚Üò'}")
    
    print(f"\\nPredicted Prices (Next 10 Days):")
    from datetime import datetime, timedelta
    last_date = datetime.strptime(dates[-1], '%Y-%m-%d')
    
    for i, pred_price in enumerate(predictions, 1):
        pred_date = (last_date + timedelta(days=i)).strftime('%Y-%m-%d')
        change = ((pred_price - current_price) / current_price) * 100
        print(f"  Day {i} ({pred_date}): ${pred_price:.2f} ({change:+.2f}%)")
    
    # Investment recommendation
    predicted_change = ((predictions[-1] - current_price) / current_price) * 100
    print(f"\\nüí° Investment Insight:")
    print(f"  Expected 10-day change: {predicted_change:+.2f}%")
    
    if predicted_change > 2:
        print(f"  Recommendation: BUY üü¢ - Strong upward trend")
    elif predicted_change > 0:
        print(f"  Recommendation: HOLD üü° - Moderate growth expected")
    elif predicted_change > -2:
        print(f"  Recommendation: HOLD üü° - Slight decline expected")
    else:
        print(f"  Recommendation: CAUTION üî¥ - Downward trend")
else:
    print("  ‚ö†Ô∏è Could not fetch Apple stock data")
"""
    
    if "microsoft" in analysis_task.lower() or "msft" in analysis_task.lower() or "compare" in analysis_task.lower():
        code += """
print("\\nüìä ANALYSIS 2: Microsoft (MSFT) Stock Prediction")
print("-" * 80)

# Fetch Microsoft stock data
dates_msft, prices_msft = fetch_stock_data('MSFT', days=30)

if prices_msft:
    print(f"\\nHistorical Data (Last 10 days):")
    for i in range(max(0, len(dates_msft) - 10), len(dates_msft)):
        print(f"  {dates_msft[i]}: ${prices_msft[i]:.2f}")
    
    # Calculate statistics
    current_price_msft = prices_msft[-1]
    avg_price_msft = np.mean(prices_msft)
    volatility_msft = np.std(prices_msft)
    
    print(f"\\nStatistical Summary:")
    print(f"  Current Price: ${current_price_msft:.2f}")
    print(f"  Average Price: ${avg_price_msft:.2f}")
    print(f"  Volatility: ${volatility_msft:.2f}")
    
    # Perform prediction
    predictions_msft, slope_msft, intercept_msft = linear_regression_predict(prices_msft, days_ahead=10)
    
    print(f"\\nLinear Regression Model:")
    print(f"  Slope: {slope_msft:.4f}")
    print(f"  Trend: {'UPWARD ‚Üó' if slope_msft > 0 else 'DOWNWARD ‚Üò'}")
    
    print(f"\\nPredicted Prices (Next 10 Days):")
    last_date_msft = datetime.strptime(dates_msft[-1], '%Y-%m-%d')
    
    for i, pred_price in enumerate(predictions_msft[:5], 1):  # Show first 5
        pred_date = (last_date_msft + timedelta(days=i)).strftime('%Y-%m-%d')
        change = ((pred_price - current_price_msft) / current_price_msft) * 100
        print(f"  Day {i} ({pred_date}): ${pred_price:.2f} ({change:+.2f}%)")
    
    predicted_change_msft = ((predictions_msft[-1] - current_price_msft) / current_price_msft) * 100
    print(f"  ... Day 10: ${predictions_msft[-1]:.2f} ({predicted_change_msft:+.2f}%)")
    
else:
    print("  ‚ö†Ô∏è Could not fetch Microsoft stock data")
"""
    
    if "compare" in analysis_task.lower():
        code += """
print("\\nüìä COMPARATIVE ANALYSIS: AAPL vs MSFT")
print("-" * 80)

if prices and prices_msft:
    # Compare performance
    aapl_30d_change = ((prices[-1] - prices[0]) / prices[0]) * 100
    msft_30d_change = ((prices_msft[-1] - prices_msft[0]) / prices_msft[0]) * 100
    
    print(f"\\n30-Day Performance:")
    print(f"  Apple (AAPL): {aapl_30d_change:+.2f}%")
    print(f"  Microsoft (MSFT): {msft_30d_change:+.2f}%")
    
    print(f"\\nVolatility Comparison:")
    print(f"  Apple: ${volatility:.2f} (std dev)")
    print(f"  Microsoft: ${volatility_msft:.2f} (std dev)")
    
    print(f"\\n10-Day Prediction Comparison:")
    print(f"  Apple: {predicted_change:+.2f}%")
    print(f"  Microsoft: {predicted_change_msft:+.2f}%")
    
    print(f"\\nüèÜ Investment Recommendation:")
    if predicted_change > predicted_change_msft:
        print(f"  AAPL shows stronger growth potential (+{predicted_change:.2f}% vs +{predicted_change_msft:.2f}%)")
        print(f"  Recommendation: AAPL preferred for short-term gains")
    elif predicted_change_msft > predicted_change:
        print(f"  MSFT shows stronger growth potential (+{predicted_change_msft:.2f}% vs +{predicted_change:.2f}%)")
        print(f"  Recommendation: MSFT preferred for short-term gains")
    else:
        print(f"  Both stocks show similar growth patterns")
        print(f"  Recommendation: Consider diversifying between both")
"""
    
    if "long" in analysis_task.lower() or "invest" in analysis_task.lower() or "recommendation" in analysis_task.lower():
        code += """
print("\\nüìä ANALYSIS 3: Tech Stocks Investment Recommendations")
print("-" * 80)

# Analyze multiple tech stocks
tech_stocks = {
    'AAPL': 'Apple',
    'MSFT': 'Microsoft',
    'GOOGL': 'Google',
    'META': 'Meta',
    'NVDA': 'NVIDIA'
}

print(f"\\nAnalyzing {len(tech_stocks)} major tech stocks...")
print()

results = []

for symbol, name in tech_stocks.items():
    dates_stock, prices_stock = fetch_stock_data(symbol, days=30)
    
    if prices_stock and len(prices_stock) > 10:
        current = prices_stock[-1]
        change_30d = ((prices_stock[-1] - prices_stock[0]) / prices_stock[0]) * 100
        volatility_stock = np.std(prices_stock)
        
        # Predict
        predictions_stock, slope_stock, _ = linear_regression_predict(prices_stock, days_ahead=10)
        predicted_change_stock = ((predictions_stock[-1] - current) / current) * 100
        
        results.append({
            'symbol': symbol,
            'name': name,
            'current': current,
            'change_30d': change_30d,
            'volatility': volatility_stock,
            'predicted_10d': predicted_change_stock,
            'trend': 'UP' if slope_stock > 0 else 'DOWN'
        })
        
        print(f"{name} ({symbol}):")
        print(f"  Current: ${current:.2f}")
        print(f"  30-day change: {change_30d:+.2f}%")
        print(f"  Predicted 10-day change: {predicted_change_stock:+.2f}%")
        print(f"  Volatility: ${volatility_stock:.2f}")
        print(f"  Trend: {('UPWARD ‚Üó' if slope_stock > 0 else 'DOWNWARD ‚Üò')}")
        print()

# Sort by predicted growth
results.sort(key=lambda x: x['predicted_10d'], reverse=True)

print("\\nüèÜ TOP INVESTMENT RECOMMENDATIONS (10-day outlook):")
print("-" * 80)
for i, stock in enumerate(results[:3], 1):
    print(f"{i}. {stock['name']} ({stock['symbol']})")
    print(f"   Current Price: ${stock['current']:.2f}")
    print(f"   Expected 10-day gain: {stock['predicted_10d']:+.2f}%")
    print(f"   30-day performance: {stock['change_30d']:+.2f}%")
    print(f"   Risk level: {'High' if stock['volatility'] > 5 else 'Moderate' if stock['volatility'] > 3 else 'Low'}")
    print()
"""
    
    code += """
print("=" * 80)
print("‚úÖ Analysis Complete")
print("=" * 80)
"""
    
    try:
        # Execute with networking enabled to fetch stock data
        result = cognitora_client.code_interpreter.execute(
            code=code,
            language="python",
            networking=True  # Enable networking for API calls
        )
        
        # Check execution status
        status = result.data.status
        if status == "error" or status == "failed":
            error_msgs = []
            for output_item in result.data.outputs:
                if output_item.type == "stderr":
                    error_msgs.append(output_item.data)
            return f"‚ùå Analysis failed: {status}\n" + "\n".join(error_msgs) if error_msgs else f"‚ùå Analysis failed: {status}"
        
        # Extract output
        output_lines = []
        error_lines = []
        for output_item in result.data.outputs:
            if output_item.type == "stdout":
                output_lines.append(output_item.data)
            elif output_item.type == "stderr":
                error_lines.append(output_item.data)
        
        result_text = ""
        if output_lines:
            result_text = "‚úÖ Stock Analysis Complete!\n\n" + "\n".join(output_lines)
        else:
            result_text = "‚ö†Ô∏è Analysis executed but no output captured."
        
        # Include warnings if any (but don't fail the analysis)
        if error_lines:
            warnings = "\n".join(error_lines)
            # Only show if it's not just deprecation warnings
            if "DeprecationWarning" not in warnings:
                result_text += "\n\n‚ö†Ô∏è Warnings:\n" + warnings
        
        return result_text
            
    except Exception as e:
        return f"‚ùå Error: {str(e)}"


# ============================================================================
# MAIN DEMO
# ============================================================================

async def main():
    """Demonstrate autonomous stock analyst capabilities"""
    
    print(f"\n{Colors.BOLD}{'=' * 80}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.CYAN}")
    print("     üìà AUTONOMOUS STOCK ANALYST WITH PREDICTIVE ANALYTICS üìà")
    print(f"{Colors.ENDC}{Colors.BOLD}{'=' * 80}{Colors.ENDC}\n")
    
    print(f"{Colors.GREEN}‚ú® POWERED BY:{Colors.ENDC}")
    print(f"   ‚Ä¢ OpenAI Agents SDK - Agentic analysis orchestration")
    print(f"   ‚Ä¢ Cognitora - Secure code execution with networking")
    print(f"   ‚Ä¢ OpenAI GPT-4o - Advanced reasoning")
    print(f"   ‚Ä¢ Yahoo Finance API - Real stock market data (free!)\n")
    
    print(f"{Colors.YELLOW}üéØ CAPABILITIES:{Colors.ENDC}")
    print(f"   ‚Ä¢ Fetch real-time stock data from Yahoo Finance")
    print(f"   ‚Ä¢ Perform linear regression for price prediction")
    print(f"   ‚Ä¢ Multi-stock comparison and analysis")
    print(f"   ‚Ä¢ Investment recommendations based on ML")
    print(f"   ‚Ä¢ Automated report generation\n")
    
    # Validate API keys
    if not OPENAI_API_KEY:
        print(f"{Colors.RED}‚ùå Error: OPENAI_API_KEY not set{Colors.ENDC}")
        return
    
    if not COGNITORA_API_KEY:
        print(f"{Colors.RED}‚ùå Error: COGNITORA_API_KEY not set{Colors.ENDC}")
        return
    
    print(f"{Colors.CYAN}{'=' * 80}{Colors.ENDC}\n")
    
    # ========================================================================
    # Initialize AI Stock Analyst Agent
    # ========================================================================
    
    print(f"{Colors.YELLOW}ü§ñ Initializing AI Stock Analyst Agent{Colors.ENDC}")
    print(f"{Colors.DIM}{'‚îÄ' * 80}{Colors.ENDC}")
    
    stock_analyst = Agent(
        name="stock_analyst",
        model="gpt-4o",
        instructions="""You are an expert Financial Analyst and Data Scientist specializing in stock market analysis.

YOUR CAPABILITIES:
- Fetch real stock market data from Yahoo Finance API
- Perform statistical analysis and trend detection
- Build predictive models using linear regression
- Provide investment recommendations based on data
- Generate professional analysis reports

CRITICAL RULES:
1. Use the analyze_stocks_with_ml tool for all analysis
2. Always base recommendations on actual data and predictions
3. Be clear about uncertainties and risks
4. Provide specific numbers and percentages
5. Give actionable investment insights

ANALYSIS WORKFLOW:
1. Fetch historical stock data (30 days)
2. Calculate statistical metrics (avg, volatility, trends)
3. Apply linear regression for predictions
4. Generate forecasts for next 10 days
5. Provide clear buy/hold/sell recommendations

Be thorough, data-driven, and professional in your analysis!""",
        tools=[analyze_stocks_with_ml]
    )
    
    print(f"{Colors.GREEN}‚úÖ AI agent ready!{Colors.ENDC}\n")
    
    # ========================================================================
    # Analysis Tasks
    # ========================================================================
    
    print(f"{Colors.CYAN}{'‚ïê' * 80}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.BLUE}üìä RUNNING STOCK ANALYSES{Colors.ENDC}")
    print(f"{Colors.CYAN}{'‚ïê' * 80}{Colors.ENDC}\n")
    
    analyses = [
        {
            "name": "Apple Stock Prediction",
            "query": """Analyze Apple (AAPL) stock and predict prices for the next 10 days.

Use the analyze_stocks_with_ml tool to:
1. Fetch last 30 days of AAPL historical data
2. Calculate statistical metrics
3. Build linear regression model
4. Predict next 10 days
5. Provide investment recommendation

Show all numbers, predictions, and insights!"""
        },
        {
            "name": "AAPL vs MSFT Comparison",
            "query": """Compare Apple (AAPL) and Microsoft (MSFT) stocks and recommend which one to invest in.

Use the analyze_stocks_with_ml tool to:
1. Fetch data for both AAPL and MSFT
2. Compare historical performance
3. Compare volatility and trends
4. Predict next 10 days for both
5. Recommend which stock is better for short-term investment

Be specific with numbers!"""
        },
        {
            "name": "Tech Stocks Investment Recommendations",
            "query": """Analyze major tech stocks (AAPL, MSFT, GOOGL, META, NVDA) and recommend the top 3 for investment.

Use the analyze_stocks_with_ml tool to:
1. Fetch data for all 5 tech stocks
2. Analyze each stock's performance and trend
3. Predict 10-day outlook for each
4. Rank them by growth potential
5. Recommend top 3 with clear reasoning

Include specific predictions and percentages!"""
        },
    ]
    
    results = []
    total_time = 0
    
    for i, analysis in enumerate(analyses, 1):
        print(f"{Colors.YELLOW}üìà Analysis {i}/{len(analyses)}: {analysis['name']}{Colors.ENDC}")
        print(f"{Colors.DIM}{'‚îÄ' * 80}{Colors.ENDC}\n")
        
        start_time = time.time()
        result = await Runner.run(stock_analyst, input=analysis['query'])
        duration = time.time() - start_time
        total_time += duration
        
        print(f"\n{Colors.GREEN}{result.final_output}{Colors.ENDC}")
        print(f"{Colors.DIM}‚è±Ô∏è  Completed in {duration:.1f}s{Colors.ENDC}\n")
        
        results.append({
            "name": analysis['name'],
            "text": str(result.final_output),
            "duration": duration
        })
        
        # Add delay between analyses to avoid rate limiting
        if i < len(analyses):
            time.sleep(2)
    
    # ========================================================================
    # Save Results to Markdown
    # ========================================================================
    
    print(f"\n{Colors.YELLOW}üíæ Saving analysis report to markdown...{Colors.ENDC}")
    
    try:
        markdown_path = save_analysis_to_markdown(results)
        file_size = os.path.getsize(markdown_path)
        print(f"{Colors.GREEN}‚úÖ Report saved: {markdown_path} ({file_size:,} bytes){Colors.ENDC}\n")
    except Exception as e:
        print(f"{Colors.RED}‚ùå Failed to save report: {str(e)}{Colors.ENDC}\n")
    
    # ========================================================================
    # Summary
    # ========================================================================
    
    print(f"\n{Colors.CYAN}{'‚ïê' * 80}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.GREEN}‚úÖ ALL ANALYSES COMPLETE!{Colors.ENDC}")
    print(f"{Colors.CYAN}{'‚ïê' * 80}{Colors.ENDC}\n")
    
    print(f"{Colors.YELLOW}üìä Analysis Summary:{Colors.ENDC}")
    for i, result in enumerate(results, 1):
        print(f"   {i}. {result['name']} ({result['duration']:.1f}s)")
    
    print(f"\n{Colors.YELLOW}‚è±Ô∏è  Total Time: {total_time:.1f}s{Colors.ENDC}\n")
    
    print(f"{Colors.GREEN}‚ú® This demonstrates:{Colors.ENDC}")
    print(f"   ‚úÖ Real stock data fetching (Yahoo Finance API)")
    print(f"   ‚úÖ Predictive analytics with linear regression")
    print(f"   ‚úÖ Multi-stock comparison and ranking")
    print(f"   ‚úÖ AI-powered investment recommendations")
    print(f"   ‚úÖ Autonomous data analyst capabilities")
    print(f"   ‚úÖ Markdown report generation\n")
    
    print(f"{Colors.BLUE}üìÅ Output Files:{Colors.ENDC}")
    print(f"   ‚Ä¢ Analysis report: {os.path.abspath('output_analysis')}/")
    print(f"   ‚Ä¢ Timestamp: {datetime.now().strftime('%Y%m%d_%H%M%S')}.md\n")
    
    print(f"{Colors.BLUE}üí° Inspired by getDynamiq's autonomous analyst{Colors.ENDC}")
    print(f"{Colors.DIM}   But built with OpenAI Agents SDK + Cognitora!{Colors.ENDC}\n")
    
    print(f"{Colors.CYAN}üöÄ Try other examples:{Colors.ENDC}")
    print(f"   ‚Ä¢ 1-example-basic-tasks.py - Basic agentic tasks")
    print(f"   ‚Ä¢ 4-example-live-crypto-tracker.py - Live crypto data")
    print(f"   ‚Ä¢ 5-example-multi-agent-research.py - Multi-agent collaboration")
    print(f"   ‚Ä¢ 6-example-data-visualization.py - Data visualization\n")


if __name__ == "__main__":
    asyncio.run(main())

